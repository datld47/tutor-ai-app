from usercustomize import *
#threading
import threading

#flask
from flask import Flask,jsonify,request
from flask_caching import Cache
from flask_httpauth import HTTPTokenAuth
import logging

#image
from PIL import Image as PILImage, ImageTk
import matplotlib.pyplot  as plt

#tkinter
from tkinter import *
from tkinter import messagebox,scrolledtext
from tkinter import filedialog
from tkinter import ttk
import tkinter as tk
import os
import requests

from queue import Queue,Empty
import json
from datetime import datetime
import glob
import google.generativeai as genai
from prompt.rule import continue_conversation_rule,help_promt,json_sessions_to_markdown,create_main_rule,re_response_prompt
from compiler_c import *
import markdown
from tkhtmlview import HTMLLabel
import ast
import re
from tkcode import CodeEditor
import tkcode
import unicodedata
import codecs
import time
from enum import Enum

#for login
from login_gui import *

from datetime import datetime, timedelta

from google_driver_api import upload_file_to_driver,upload_file_course,download_file_course_from_driver,upload_img,extract_zip_overwrite,download_file_img_from_driver

##########Bi·∫øn to√†n c·ª•c #################################################################################
if getattr(sys, 'frozen', False):
    PATH_CATCH = get_path('../cache')
    PATH_LOG = get_path('../log')
    PATH_JSON_COURSE = get_path('../data/course.json')
    PATH_JSON_COURSE_UPDATE = get_path('../data/course_update.json')
    PATH_JSON_CONFIG = get_path('../data/config.json')
    PATH_JSON_RULE = get_path('../data/rule.md')
    PATH_IMG = get_path('../img')
    PATH_UPLOAD = get_path('../upload')
    PATH_STUDENT_LIST = get_path('../data/student.json')
    PATH_DOWNLOAD = get_path('../download')
    PATH_DATA = get_path('../data')
    PATH_COMPILER=get_path('../compiler')
else:
    PATH_CATCH = get_path('cache')
    PATH_LOG = get_path('log')
    PATH_JSON_COURSE = get_path('data/course.json')
    PATH_JSON_COURSE_UPDATE = get_path('data/course_update.json')
    PATH_JSON_CONFIG = get_path('data/config.json')
    PATH_JSON_RULE = get_path('data/rule.md')
    PATH_IMG = get_path('img')
    PATH_UPLOAD = get_path('upload')
    PATH_STUDENT_LIST = get_path('data/student.json')
    PATH_DOWNLOAD = get_path('download')
    PATH_DATA = get_path('data')
    PATH_COMPILER=get_path('compiler')

create_folder(PATH_CATCH)
create_folder(PATH_LOG)
create_folder(PATH_DOWNLOAD)
create_folder(PATH_UPLOAD)

APP_VERSION=''
CACHE_STATUS=0
STUDENT_LIST=[]
API_KEY_LIST=[]
API_KEY=''
ACCOUNT_ROLE=''
MODEL=None # ƒê√£ s·ª≠a NONE th√†nh None
DICT_USER_INFO=None
json_course=None
main_rule=''
model=None
history=[]
queue = Queue()
queue_log=Queue()
ID_EXERCISE=None
MAX_RETRY=2

COURSE_FILE_MAP = {} # Bi·∫øn m·ªõi ƒë·ªÉ l∆∞u √°nh x·∫° t·ª´ t√™n m√¥n h·ªçc -> ƒë∆∞·ªùng d·∫´n file JSON

#th√¥ng tin cho prompt m√¥n h·ªçc
CURRENT_COURSE_NAME = ""
CURRENT_COURSE_LANGUAGE = ""

#ng√¥n ng·ªØ c·ªßa compiler
CURRENT_EXERCISE_LANGUAGE = ""

###################################################################################################################
######## Khai b√°o l·ªõp ##########
class ExerciseStatus(Enum):
    COMPLETED = "‚úì"
    INCOMPLETE = "‚úó"

class label_image(tk.Frame):
    def __init__(self, parent, path_image,title):
        super().__init__(parent)
        self.columnconfigure(0,weight=1)
        self.rowconfigure(0,weight=0)
        self.rowconfigure(1,weight=0)
        img_ = PILImage.open(path_image)
        tk_img = ImageTk.PhotoImage(img_)
        self.label_img = tk.Label(self, image=tk_img)
        self.label_img.image = tk_img  # gi·ªØ tham chi·∫øu
        self.label_img.grid(row=0,column=0,sticky='nswe')
       
       
        self.label_title = tk.Label(self, text=title, font=("Arial", 12), fg="blue")
        self.label_title.grid(row=1,column=0,sticky='s') 
        
class us_gemini_image_description(tk.Frame):
    
    def __init__(self, parent,model):
        super().__init__(parent)
        
    
        self.model=model
        self.output_text=tk.Text(self,wrap="word", font=("Arial", 11))
        self.image_label=tk.Label(self)
        self.upload_button = tk.Button(self, text="üìÅ Ch·ªçn ·∫£nh ƒë·ªÉ m√¥ t·∫£", command=self.upload_and_process_image, font=("Arial", 12))

        self.columnconfigure(0,weight=1)
        self.rowconfigure(1,weight=1)
        self.rowconfigure(2,weight=1)
        
        self.grid(row=0,column=0,sticky='nswe')
        self.upload_button.grid(row=0,column=0,sticky='ns')
        self.image_label.grid(row=1,column=0,sticky='nswe')
        self.output_text.grid(row=2,column=0,sticky='nswe')
        
    def describe_image_with_gemini(self,image_path):
        with open(image_path, "rb") as img_file:
            image_bytes = img_file.read()

        try:
            response = self.model.generate_content([
                "T√¥i c·∫ßn l·∫•y m√¥ t·∫£ ·∫£nh ƒë·ªÉ cung c·∫•p cho h·ªá th·ªëng AI hi·ªÉu trong c√°c ·ª©ng d·ª•ng li√™n quan ƒë·∫øn ·∫£nh. H√£y m√¥ t·∫£ chi ti·∫øt ·∫£nh n√†y b·∫±ng ti·∫øng vi·ªát, t√¥i s·∫Ω l∆∞u k·∫øt qu·∫£ n√†y v√†o chu·ªói n√™n v√† **l∆∞u √Ω:ch·ªâ ghi tr√™n m·ªôt d√≤ng, ch√∫ √Ω escape sao cho khi g√°n v√†o chu·ªói s·∫Ω h·ª£p l·ªá**",
                {"mime_type": "image/png", "data": image_bytes}
            ])
            return response.text
        except Exception as e:
            return f"L·ªói: {e}"
        
    def upload_and_process_image(self):
        file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.png;*.jpg;*.jpeg;*.bmp")])
        if not file_path:
            return

        # G·ª≠i ·∫£nh ƒë·∫øn Gemini ƒë·ªÉ m√¥ t·∫£
        result = self.describe_image_with_gemini(file_path)

        # Hi·ªÉn th·ªã m√¥ t·∫£ l√™n TextBox
        self.output_text.delete(1.0, tk.END)
        self.output_text.insert(tk.END, result)

        # Hi·ªÉn th·ªã preview ·∫£nh
        img = PILImage.open(file_path)
        img.thumbnail((250, 250))
        img_tk = ImageTk.PhotoImage(img)
        self.image_label.configure(image=img_tk)
        self.image_label.image = img_tk  # gi·ªØ ·∫£nh trong b·ªô nh·ªõ


class us_upload_file_to_google_driver(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.columnconfigure(0,weight=1)
        self.columnconfigure(1,weight=1)
        self.grid(row=0,column=0,sticky='nswe')
        
        tk.Label(self,text='T·∫£i file l√™n google drive',bg='green',fg='white',font=("Arial", 12)).grid(row=0,column=0,sticky='nswe',pady=10,columnspan=2)
        
        self.btn_upload= tk.Button(self, text="üìÅ Ch·ªçn file course", command=self.upload_file, font=("Arial", 12))
        self.btn_upload.grid(row=1,column=0,sticky='ns',pady=5)
        
        self.status1=tk.Label(self,text='status',font=("Arial", 12))
        self.status1.grid(row=1,column=1,sticky='w',pady=5)
        
        self.btn_upload_img=tk.Button(self,text="üìÅ Ch·ªçn folder img",command=self.upload_img,font=("Arial", 12))
        self.btn_upload_img.grid(row=2,column=0,sticky='ns',pady=5)
        
        self.status2=tk.Label(self,text='status',font=("Arial", 12))
        self.status2.grid(row=2,column=1,sticky='w',pady=5)
        
    def upload_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("JSON files", "*.json")])
        if file_path.endswith('.json'):
            try:
                id= upload_file_course(file_path,'course_update.json')
                if id!='':
                    self.status1.config(text='‚úì')
            except Exception as err:
                messagebox.showerror('L·ªói upload file',f'err')
                self.status1.config(text='‚úó')
        else:
            messagebox.showinfo("L·ªói ƒë∆∞·ªùng d·∫´n file",'file ch·ªçn b·∫Øt bu·ªôc ki·ªÉu json')
            self.status1.config(text='‚úó')
    
    def upload_img(self):
        folder_path = filedialog.askdirectory()
        if folder_path:
            try:
                id=upload_img(folder_path,'img.zip')
                if id!='':
                    self.status2.config(text='‚úì')
            except Exception as err:
                messagebox.showerror('L·ªói upload img',f'err')
                self.status2.config(text='‚úó')
        else:
            messagebox.showinfo("L·ªói ƒë∆∞·ªùng d·∫´n folder",'Ch∆∞a ch·ªçn folder')
            self.status2.config(text='‚úó')
                     
#############Khai b√°o h√†m#########################################################################################

def is_connected():
    try:
        requests.get("https://www.google.com", timeout=3)
        return True
    except requests.ConnectionError as err:
        return False
    

def load_app_data():
    global STUDENT_LIST
    global API_KEY_LIST
    global API_KEY
    global MODEL
    global DICT_USER_INFO
    global json_course
    global main_rule
    global CACHE_STATUS
    global APP_VERSION
    global COURSE_FILE_MAP
    global CURRENT_EXERCISE_LANGUAGE

    # T·∫£i STUDENT_LIST
    # PATH_STUDENT_LIST ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ·ªü global scope
    with open(PATH_STUDENT_LIST, "r", encoding="utf-8") as file:
        try:
            STUDENT_LIST=json.load(file)
        except Exception as e:
            print(f"L·ªói t·∫£i student.json: {e}")
            STUDENT_LIST=[]

    # T·∫£i CONFIG
    with open(PATH_JSON_CONFIG, "r", encoding="utf-8") as file:
        try:
            config=json.load(file)
            if not config['api'][0].get('gemini_key') or not config['api'][0]['gemini_key']: # Use .get()
                # ... (API Keys m·∫∑c ƒë·ªãnh) ...
                API_KEY_LIST= [ # C√°c API key m·∫∑c ƒë·ªãnh
                                    "AIzaSyDvCMr_GJMvGxFynOvLedw04rqJ6_iElF0",
                                    "AIzaSyAF5-pKkd-y_EJYRoOQbYgw7fAmNWtvsq4",
                                    "AIzaSyAxVA26qSbc3Hvg6Hdqti4HvxtU0wN1sqo",
                                    "AIzaSyDrCxX9U0zNXPVkU2SE9wpGeN0sSYwNJ2I",
                                    "AIzaSyAK4nsb74n2I51jt3sH9bqpuHMRlJntV6Q",
                                    "AIzaSyAeB3zypsW9cgqENXPt1QfwkSBL7Bm2BAM",
                                    "AIzaSyD5j90VdXoQCRiVWD0bMzhpSXiOIcWx_Mg",
                                    "AIzaSyAhl5OP4FG7m048BHjjiKhZSC4pFrMBpVo",
                                    "AIzaSyDy5z-BHwmPL8ItNJJ6IdNaWjw-l2bNR4E",
                                    "AIzaSyAi2miv5ixUjrMTrFehhPH62Efo6wMIMMA",
                                    "AIzaSyBEpoVLETjcehxmd7faIkU7lablGAm7k9k",
                                    "AIzaSyBP39bWjuKeCDYqzLlY1FBueSQH2wtGfDg",
                                    "AIzaSyBrLVKtuwIs11WjYVS-1VyYICpkxpcRLys",
                                    "AIzaSyAT7ghjymT6klV-uN_8zqaGapnxnHJO7FI",
                                    "AIzaSyDhUZ9TOsGH5oIj4xHVg7wTootfe0eJCjY",
                                    "AIzaSyAg85SyVh8bwmoAHD5ClMYPSZDYcUKZge8",
                                    "AIzaSyBgXlzFpaQJbAaj-_6DYeE4m-Q-fYq21GM",
                                    "AIzaSyDLBPmqFncpruW52U5jQvWsLbkeMsf6c0g",
                                    "AIzaSyB64OSSTmfiaAKokNhYIeG1xHAv1Vq4jEw",
                                    "AIzaSyB2rtw9IJH8U_T064-Egx-iq0l16vq9Bj0",
                                    "AIzaSyCcQ0B0xrMTrxfo_4FVvgVX059dHHu0WKA",
                                    "AIzaSyCMdYZUu20OuhGvg4GlkF9Tg1E-aCWuXgw",
                                    "AIzaSyDkI2K-mytvzdWm7isbcSATa0sELEtzuRU",
                                    "AIzaSyB0tadJbKusAxTbYQBkvTqulK2UkMU82sQ",
                                    "AIzaSyALNGPa7ub-cvNTBNz1oKKjU631yKHP3Hw",
                                    "AIzaSyApCym0pQaZFHKVZIABBrZdxpKV-mzCuZg",
                                    "AIzaSyBqmgmNPF76Ex5u7S0IWIP-tZyMVv_Bcxk",
                                    "AIzaSyBrx2NP9XH2wkimt9XItNe6g9lbIDg8A2c",
                                    "AIzaSyCZiYQ9rofcm3ndFDIPcpEXk3y0b2LbKLA",
                                    "AIzaSyCss_cuhhDcA2ScTtTJ9VttU7Zq35e3MOE",
                                    "AIzaSyBQM1j6IMi08CfToV96aS96XFCpcKUYyPE"                                    
                                ]
            else:
                API_KEY_LIST=config['api'][0]['gemini_key']
            
            API_KEY=API_KEY_LIST[0] if API_KEY_LIST else '' # Handle empty API_KEY_LIST
            MODEL=config['api'][1]['model']
            DICT_USER_INFO=config['user']
            CACHE_STATUS=config['system'][0]['cache_status']
            print(f'cache_status={CACHE_STATUS}')
            APP_VERSION=config['system'][1]['version']
            print(f'APP_VERSION={APP_VERSION}')
        except Exception as e:
            print(f"L·ªói khi t·∫£i config.json: {e}")
            API_KEY=''
            MODEL=''
            DICT_USER_INFO=None

    # T·∫£i RULE
    with open(PATH_JSON_RULE, "r", encoding="utf-8") as file:
        try:
            main_rule = file.read()
        except Exception as e:
            print(f"L·ªói t·∫£i rule.md: {e}")
            main_rule = ''

    # --- QU√âT C√ÅC FILE COURSE V√Ä T·∫†O √ÅNH X·∫† ---
    COURSE_FILE_MAP.clear()

    # get_path('data') s·∫Ω tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c 'data'
    # v√≠ d·ª•: 'C:\path\to\your_app\dist\app\data' khi frozen
    # v√† 'C:\path\to\your_project\data' khi unfrozen (dev)
    data_folder_path =  PATH_DATA #get_path('data') 
    #messagebox.showerror("Check", " data_folder_path "+data_folder_path)
    # S·ª≠ d·ª•ng glob.glob v·ªõi ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c v√† pattern file
    course_files = glob.glob(os.path.join(data_folder_path, 'course_*.json'))

    if not course_files:
        # Fallback: N·∫øu kh√¥ng t√¨m th·∫•y file course_*.json, c·ªë g·∫Øng t·∫£i course.json c≈© n·∫øu t·ªìn t·∫°i
        if os.path.exists(PATH_JSON_COURSE): # PATH_JSON_COURSE gi·ªù ƒë√£ ƒë√∫ng
            try:
                with open(PATH_JSON_COURSE, "r", encoding="utf-8") as file:
                    json_course = json.load(file)
                    if "course_name" not in json_course:
                        json_course["course_name"] = "M√¥n h·ªçc m·∫∑c ƒë·ªãnh (Course.json)"
                    COURSE_FILE_MAP[json_course["course_name"]] = PATH_JSON_COURSE
                    print(f"DEBUG: Loaded default course.json: {json_course['course_name']}")
                    CURRENT_EXERCISE_LANGUAGE = json_course.get("course_language", "c").lower()
                    print(f"DEBUG: Initial language (fallback course.json): {CURRENT_EXERCISE_LANGUAGE}")
            except Exception as e:
                print(f"L·ªói t·∫£i course.json m·∫∑c ƒë·ªãnh: {e}")
                json_course = None
                CURRENT_EXERCISE_LANGUAGE = "c"
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng t√¨m th·∫•y file course.json n√†o.")
            return
        else:
            json_course = None
            CURRENT_EXERCISE_LANGUAGE = "c"
            # PATH_JSON_COURSE hi·ªÉn th·ªã ·ªü ƒë√¢y ƒë√£ ƒë√∫ng ƒë∆∞·ªùng d·∫´n
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file course JSON h·ª£p l·ªá n√†o trong th∆∞ m·ª•c data/. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu. path "+PATH_JSON_COURSE)
            return

    # Duy·ªát qua c√°c file course_*.json t√¨m ƒë∆∞·ª£c
    for file_path in course_files:
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                temp_course_data = json.load(file)
                course_name = temp_course_data.get("course_name")
                if course_name:
                    COURSE_FILE_MAP[course_name] = file_path
                    print(f"DEBUG: Found course file: {course_name} -> {file_path}")
                else:
                    print(f"C·∫£nh b√°o: File {file_path} thi·∫øu tr∆∞·ªùng 'course_name'. B·ªè qua.")
        except Exception as e:
            print(f"L·ªói khi ƒë·ªçc file course JSON {file_path}: {e}")    

    # T·∫£i course m·∫∑c ƒë·ªãnh khi kh·ªüi ƒë·ªông (v√≠ d·ª•: K·ªπ thu·∫≠t l·∫≠p tr√¨nh (C))
    default_course_name = "K·ªπ thu·∫≠t l·∫≠p tr√¨nh (C)"
    if default_course_name in COURSE_FILE_MAP:
        try:
            with open(COURSE_FILE_MAP[default_course_name], "r", encoding="utf-8") as file:
                json_course = json.load(file)
            print(f"DEBUG: Loaded initial course: {default_course_name}")
            # TH√äM D√íNG N√ÄY: Thi·∫øt l·∫≠p ng√¥n ng·ªØ khi t·∫£i m√¥n h·ªçc m·∫∑c ƒë·ªãnh
            CURRENT_EXERCISE_LANGUAGE = json_course.get("course_language", "c").lower()
            print(f"DEBUG: Initial language (default course): {CURRENT_EXERCISE_LANGUAGE}")
        except Exception as e:
            print(f"L·ªói t·∫£i course ban ƒë·∫ßu '{default_course_name}': {e}")
            json_course = None
            CURRENT_EXERCISE_LANGUAGE = "c" # Fallback language
    elif COURSE_FILE_MAP: # N·∫øu kh√¥ng t√¨m th·∫•y m·∫∑c ƒë·ªãnh, ch·ªçn c√°i ƒë·∫ßu ti√™n t√¨m ƒë∆∞·ª£c
        first_course_name = list(COURSE_FILE_MAP.keys())[0]
        try:
            with open(COURSE_FILE_MAP[first_course_name], "r", encoding="utf-8") as file:
                json_course = json.load(file)
            print(f"DEBUG: Loaded initial course: {first_course_name} (fallback)")
            # TH√äM D√íNG N√ÄY: Thi·∫øt l·∫≠p ng√¥n ng·ªØ khi t·∫£i m√¥n h·ªçc ƒë·∫ßu ti√™n (fallback)
            CURRENT_EXERCISE_LANGUAGE = json_course.get("course_language", "c").lower()
            print(f"DEBUG: Initial language (first course fallback): {CURRENT_EXERCISE_LANGUAGE}")
        except Exception as e:
            print(f"L·ªói t·∫£i course ban ƒë·∫ßu '{first_course_name}': {e}")
            json_course = None
            CURRENT_EXERCISE_LANGUAGE = "c" # Fallback language
    else: # Kh√¥ng c√≥ file course n√†o h·ª£p l·ªá
        json_course = None
        CURRENT_EXERCISE_LANGUAGE = "c" # Fallback language
        #messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file course JSON h·ª£p l·ªá n√†o trong th∆∞ m·ª•c data/. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu.")
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file course JSON h·ª£p l·ªá n√†o trong th∆∞ m·ª•c data/. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu. course_files: "+course_files)
        
    if json_course:
        CURRENT_EXERCISE_LANGUAGE = json_course.get("course_language", "c").lower()
        print(f"DEBUG: Initial language (default/fallback course): {CURRENT_EXERCISE_LANGUAGE}")
    else:
        CURRENT_EXERCISE_LANGUAGE = "c" # Fallback n·∫øu kh√¥ng c√≥ m√¥n h·ªçc n√†o ƒë∆∞·ª£c t·∫£i
                                
def update_course_from_course_update(path_course_update):
    global json_course # json_course hi·ªán t·∫°i ƒëang ch·ª©a d·ªØ li·ªáu c·ªßa m√¥n h·ªçc ƒëang hi·ªÉn th·ªã
    
    if os.path.exists(path_course_update):
        with open(path_course_update, "r", encoding="utf-8") as file:
            try:
                json_course_update = json.load(file)
            except Exception as e: # Catch specific exception
                print(f"L·ªói t·∫£i course_update.json: {e}")
                json_course_update = None
                
        if json_course_update is not None:
            # X√°c ƒë·ªãnh file JSON c·ªßa m√¥n h·ªçc hi·ªán t·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t
            # Gi·∫£ s·ª≠ json_course (global) ch·ª©a d·ªØ li·ªáu c·ªßa m√¥n h·ªçc ƒëang hi·ªÉn th·ªã
            # v√† n√≥ c√≥ tr∆∞·ªùng 'course_name' ƒë·ªÉ t√¨m ƒë∆∞·ªùng d·∫´n file.
            
            current_course_name = json_course.get("course_name") if json_course else None
            
            if current_course_name and current_course_name in COURSE_FILE_MAP:
                # L·∫•y ƒë∆∞·ªùng d·∫´n file JSON c·ªßa m√¥n h·ªçc hi·ªán t·∫°i
                path_to_save_current_course = COURSE_FILE_MAP[current_course_name]
                
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† ƒëi·ªÉm c·ªßa c√°c b√†i t·∫≠p trong json_course_update
                # d·ª±a tr√™n tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa json_course
                if json_course is not None:
                    update_map = {}
                    for session in json_course.get('sessions', []):
                        for ex in session.get('exercises', []):
                            update_map[ex['id']] = {
                                'status': ex.get('status', '‚úó'), # Use .get()
                                'score': ex.get('score', 0)     # Use .get()
                            }

                    # C·∫≠p nh·∫≠t l·∫°i v√†o json_course_update
                    for session in json_course_update.get('sessions', []):
                        for ex in session.get('exercises', []):
                            ex_id = ex['id']
                            if ex_id in update_map:
                                ex['status'] = update_map[ex_id]['status']
                                ex['score'] = update_map[ex_id]['score']
                
                # Ghi d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t v√†o file JSON T∆Ø∆†NG ·ª®NG c·ªßa m√¥n h·ªçc ƒëang ho·∫°t ƒë·ªông
                try:
                    with open(path_to_save_current_course, 'w', encoding='utf-8') as f:
                        json.dump(json_course_update, f, indent=2, ensure_ascii=False)
                    print(f"ƒê√£ c·∫≠p nh·∫≠t file: {path_to_save_current_course}")
                    delete_file(path_course_update) # X√≥a file update sau khi c·∫≠p nh·∫≠t
                except Exception as e:
                    print(f"L·ªói khi ghi file c·∫≠p nh·∫≠t cho m√¥n h·ªçc: {e}")
                    messagebox.showerror("L·ªói ghi file", f"Kh√¥ng th·ªÉ l∆∞u c·∫≠p nh·∫≠t cho m√¥n h·ªçc: {e}")
            else:
                print("C·∫£nh b√°o: Kh√¥ng th·ªÉ x√°c ƒë·ªãnh file m√¥n h·ªçc hi·ªán t·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t.")
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng th·ªÉ l∆∞u c·∫≠p nh·∫≠t: M√¥n h·ªçc hi·ªán t·∫°i kh√¥ng x√°c ƒë·ªãnh.")
        else:
            print("C·∫£nh b√°o: course_update.json r·ªóng ho·∫∑c l·ªói, kh√¥ng c√≥ g√¨ ƒë·ªÉ c·∫≠p nh·∫≠t.")
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu c·∫≠p nh·∫≠t t·ª´ course_update.json.")

def save_json_file(filepath, data):
    with open(filepath, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)
  
def update_exercise(json_data,id, new_status:ExerciseStatus, new_score=None):
    for session in json_data.get("sessions", []):
            for ex in session.get("exercises", []):
                if ex["id"] == id:
                    if new_status is not None:
                        ex["status"] = new_status.value
                    if new_score is not None:
                        ex["score"] = new_score
                    return True  # c·∫≠p nh·∫≠t th√†nh c√¥ng
    return False  # kh√¥ng t√¨m th·∫•y
        
def update_json_course(id, new_status:ExerciseStatus, new_score=None):
    global json_course # json_course ƒëang ch·ª©a d·ªØ li·ªáu c·ªßa m√¥n h·ªçc hi·ªán t·∫°i
    res=update_exercise(json_course,id, new_status,new_score)
    if res == True:
        # X√°c ƒë·ªãnh file JSON c·ªßa m√¥n h·ªçc hi·ªán t·∫°i ƒë·ªÉ l∆∞u
        current_course_name = json_course.get("course_name") if json_course else None
        if current_course_name and current_course_name in COURSE_FILE_MAP:
            path_to_save = COURSE_FILE_MAP[current_course_name]
            save_json_file(path_to_save, json_course) # L∆∞u v√†o file c·ª• th·ªÉ c·ªßa m√¥n h·ªçc
            print(f"ƒê√£ l∆∞u c·∫≠p nh·∫≠t cho b√†i t·∫≠p {id} v√†o {path_to_save}")
        else:
            print("C·∫£nh b√°o: Kh√¥ng th·ªÉ l∆∞u c·∫≠p nh·∫≠t b√†i t·∫≠p. M√¥n h·ªçc hi·ªán t·∫°i kh√¥ng x√°c ƒë·ªãnh ho·∫∑c kh√¥ng c√≥ ƒë∆∞·ªùng d·∫´n file.")
            # Fallback: n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c, c√≥ th·ªÉ l∆∞u v√†o course.json m·∫∑c ƒë·ªãnh ho·∫∑c hi·ªÉn th·ªã l·ªói
            save_json_file(PATH_JSON_COURSE, json_course) # V·∫´n l∆∞u v√†o default n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c map
    else:
        print('c·∫≠p nh·∫≠p l·ªói b√†i t·∫≠p trong b·ªô nh·ªõ')
    
def update_model():
    global MODEL
    global API_KEY
    global model
    genai.configure(api_key=API_KEY)
    model = genai.GenerativeModel(MODEL)
    
def write_log(data):
    try:
        path_log = get_path_join(PATH_LOG,'log.json')
        # B∆∞·ªõc 1: ƒê·ªçc d·ªØ li·ªáu c≈© n·∫øu file t·ªìn t·∫°i
        if os.path.exists(path_log):
            with open(path_log, "r", encoding="utf-8") as f:
                try:
                    old_data = json.load(f)
                    if not isinstance(old_data, list):
                        old_data = []
                except json.JSONDecodeError:
                    old_data = []
        else:
            old_data = []

        # B∆∞·ªõc 2: Append d·ªØ li·ªáu m·ªõi
        if isinstance(data, list):
            old_data.extend(data)
        else:
            old_data.append(data)

        # B∆∞·ªõc 3: Ghi l·∫°i to√†n b·ªô v√†o file
        with open(path_log, "w", encoding="utf-8") as f:
            json.dump(old_data, f, indent=4, ensure_ascii=False)
    except Exception as err:
       messagebox.showerror("L·ªói ghi log",err)

def create_file_log_name(name,mssv):
    timestamp = datetime.now().strftime("%y%m%d%H%M%S")
    # Chuy·ªÉn t√™n th√†nh kh√¥ng d·∫•u v√† thay kho·∫£ng tr·∫Øng b·∫±ng g·∫°ch d∆∞·ªõi
    def convert_name(name):
        name_ascii = unicodedata.normalize('NFD', name).encode('ascii', 'ignore').decode('utf-8')
        return name_ascii.replace(" ", "_")
    name_formatted = convert_name(name)
    mssv=mssv.replace(" ","")
    # Gh√©p l·∫°i th√†nh chu·ªói
    result = f"{mssv}_{timestamp}__{name_formatted}.json"
    return result

def update_data_from_foler_download(path_course_update,path_img_zip):
    global PATH_IMG
    if path_course_update!='':
        update_course_from_course_update(path_course_update)
    if path_img_zip!='':
        extract_zip_overwrite(path_img_zip,PATH_IMG)
        delete_file(path_img_zip)
        
##################################################################################################################
def get_latest_cache():
    

    if getattr(sys, 'frozen', False):    
        course_files = get_path('../cache/cache_*.json')
    else:
        file_list = glob.glob(os.path.join(PATH_CATCH, "cache_*.json"))
        
        
    # N·∫øu c√≥ file th√¨ t√¨m file m·ªõi nh·∫•t d·ª±a tr√™n t√™n
    if file_list:
        # S·∫Øp x·∫øp theo t√™n gi·∫£m d·∫ßn (t√™n ch·ª©a timestamp)
        newest_file = sorted(file_list, reverse=True)[0]
        return newest_file
    else:
        print("Kh√¥ng t√¨m th·∫•y file cache n√†o.")
        return None
    
def load_latest_cache():
    global history
    path_cache=get_latest_cache()
    if path_cache is not None:
        with open(path_cache, "r") as f:
            data = json.load(f)
            if data:
                history.clear()
                history=data
                return True
    return False

def continue_conversation(output,fr_info):
    global queue
    if load_latest_cache():
        prompt=continue_conversation_rule
        if prompt:
           call_gemini_api_thread(prompt,queue,output,fr_info)
    else:
        messagebox.showwarning('C·∫£nh b√°o','cache r·ªóng c·∫ßn n·∫°p l·∫°i b√†i t·∫≠p')
           
def get_api_response(prompt):
    global model
    global history
    log=[]
    message = [{'role': 'user', 'parts': [prompt]}]
    
    timestamp = datetime.now().strftime("%d-%m-%y %H:%M:%S")
    message_ = [{'timestamp':f'{timestamp}','role': 'user', 'parts': [prompt]}]
    
    log.append(message_)
    
    history.extend(message)  # Th√™m message v√†o l·ªãch s·ª≠
    
    response = model.generate_content(history)
    
    timestamp = datetime.now().strftime("%d-%m-%y %H:%M:%S")
    message_ = [{'timestamp':f'{timestamp}','role': 'model', 'parts': [response.text]}]
    
    log.append(message_)
    
    history.append({'role': 'model', 'parts': [response.text]})                                  
    return response.text,log
        
def call_gemini_api_thread(prompt, queue, output=None, fr_info=None,was_retry=False):
    
    if not is_connected():
        print('R·ªõt m·∫°ng')
        messagebox.showerror("L·ªói m·∫°ng","L·ªói r·ªõt m·∫°ng - Vui l√≤ng ki·ªÉm tra m·∫°ng")
        return
    
    def worker():
        global API_KEY
        global API_KEY_LIST
        tried_keys = set()
        global model
        log=[]
        if API_KEY!='' and model!='':
            while True:
                try:
                    response,log=get_api_response(prompt)
                    break
                except Exception as err:
                    print(f"L·ªói v·ªõi API_KEY {API_KEY}: {err}")
                    tried_keys.add(API_KEY)
                    available_keys = [key for key in API_KEY_LIST if key not in tried_keys]
                    if not available_keys:
                        print("T·∫•t c·∫£ API_KEY ƒë√£ th·ª≠ v√† ƒë·ªÅu g·∫∑p l·ªói.")
                        return
                    API_KEY = random.choice(available_keys)
                    print(f"Th·ª≠ l·∫°i v·ªõi API_KEY m·ªõi: {API_KEY}")
                    update_model()
                    
            queue.put((response, output, fr_info, log,was_retry))

    t = threading.Thread(target=worker)
    t.daemon = True
    t.start()        
        
def mardown_json_to_dict(mardown_json):
    try:
        lines = mardown_json.strip().splitlines()
        if lines[0].startswith('```'):
            lines = lines[1:]
        if lines[-1].startswith('```'):
            lines = lines[:-1]
        cleaned_json = '\n'.join(lines)
        data_dict = json.loads(cleaned_json)
        return data_dict
    except:
        return None
   
def markdown_preserve_code_blocks(text):
    print('---markdown g·ªëc---')
    print(text)
    return None

def escape_code_block_content(code: str) -> str:
    """Escape n·ªôi dung block code cho JSON."""
    return code.replace('\\', '\\\\') \
               .replace('"', '\\"') \
               .replace('\n', '\\n')

def extract_and_replace_c_blocks(text):
    blocks = []
    def replacer(match):
        blocks.append(match.group(0))
        return f"__CODE_{len(blocks)-1}__"
    new_text = re.sub(r'```c\s.*?```', replacer, text, flags=re.DOTALL)
    return new_text, blocks

def normalize_code_block_indent(block: str) -> str:
    """
    Nh·∫≠n v√†o block code ki·ªÉu Markdown (```c ... ```) v√† chu·∫©n h√≥a:
    - D·∫•u ``` ƒë√≥ng ph·∫£i n·∫±m ri√™ng tr√™n d√≤ng
    - N·ªôi dung code kh√¥ng th·ª•t d√≤ng
    """
    lines = block.strip().split('\n')

    if len(lines) < 2 or not lines[0].startswith('```c'):
        return block  # Kh√¥ng ph·∫£i block code h·ª£p l·ªá

    opening = lines[0].strip()
    closing = lines[-1].strip()

    # N·∫øu d√≤ng cu·ªëi kh√¥ng ƒë√∫ng l√† ``` th√¨ c·ªë g·∫Øng t√¨m trong d√≤ng cu·ªëi ho·∫∑c lo·∫°i b·ªè th·ª•t d√≤ng
    if closing != '```':
        # Tr∆∞·ªùng h·ª£p ``` n·∫±m chung d√≤ng cu·ªëi c√πng (v√≠ d·ª•: '   ```')
        if lines[-1].strip().endswith('```'):
            # C·∫Øt d·∫•u ``` ra ri√™ng
            content_line = lines[-1].rstrip().removesuffix('```').rstrip()
            if content_line:
                code_lines = [line.lstrip() for line in lines[1:-1]] + [content_line]
            else:
                code_lines = [line.lstrip() for line in lines[1:-1]]
        else:
            # Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c ``` -> gi·ªØ nguy√™n
            return block
    else:
        code_lines = [line.lstrip() for line in lines[1:-1]]

    # G·ªôp l·∫°i block chu·∫©n
    return '\n'.join([opening] + code_lines + ['```'])

def resume_block_code(new_text,code_blocks):
    new_code_block=[]
    for block in code_blocks:
        cleaned = normalize_code_block_indent(block)
        new_code_block.append(cleaned)
        
    for i, block in enumerate(new_code_block):
        #print(block)
        new_text = new_text.replace(f"__CODE_{i}__",f"\n{block}\n")
    return new_text

def process_markdown_escape_smart(md_text):
    # T√°ch block code ```...``` ra
    code_blocks = re.findall(r'```.*?```', md_text, flags=re.DOTALL)
    placeholders = []
    temp_text = md_text

    for i, block in enumerate(code_blocks):
        placeholder = f"@@CODEBLOCK{i}@@"
        placeholders.append((placeholder, block))
        temp_text = temp_text.replace(block, placeholder)

    # T√°ch inline code `...`
    inline_codes = re.findall(r'`[^`\n]+`', temp_text)
    inline_placeholders = []

    for i, block in enumerate(inline_codes):
        placeholder = f"@@INLINE{i}@@"
        inline_placeholders.append((placeholder, block))
        temp_text = temp_text.replace(block, placeholder)

    print('-----')
    print(temp_text)
    
    return temp_text

def render_ai_json_markdown(response_text: str) -> str:
     
    print(response_text)
    match = re.search(r'```json\s*(\{.*?\})\s*```', response_text, flags=re.DOTALL)
    if match:
        json_str = match.group(1)
    else:
        json_str = response_text.strip()

    try:
        obj = json.loads(json_str)
        markdown_text = obj["data"]
        new_text, code_blocks = extract_and_replace_c_blocks(markdown_text)
        new_text=re.sub(r'(?<!\n)\n(?!\n)', '  \n', new_text)
        new_text=resume_block_code(new_text,code_blocks)        
        html = markdown.markdown(new_text, extensions=["fenced_code", "sane_lists"])
        return html,obj['info'],None
    except Exception as err:
        print('***************L·ªói ph·∫£n h·ªìi json*******************')
        return '',{},err
    
#####################################################################################################################

def update_response_callback(info):
    global ID_EXERCISE
    if ID_EXERCISE is not None:
        print('---c·∫≠p nh·∫≠p json_course---')
        print(info)
        status=info['exercise_status']
        if status=='completed':
            status=ExerciseStatus.COMPLETED
        else:
            status=ExerciseStatus.INCOMPLETE
        score=info['score']
        if status==ExerciseStatus.INCOMPLETE:
            score=score-10
        print(score)
        update_json_course(ID_EXERCISE,status,score)      
                
def update_response(window,queue):
    global re_response_prompt
    global MAX_RETRY
    try:
        while True:
            response, output, fr_info, log, was_retry= queue.get_nowait()
            html_content,info,err=render_ai_json_markdown(response)
            
            if html_content == '' and info == {}:
                print(err)
                if not was_retry:
                    print("‚ö†Ô∏è Ph·∫£n h·ªìi l·ªói ‚Üí g·ªçi l·∫°i API 1 l·∫ßn duy nh·∫•t")
                    call_gemini_api_thread(re_response_prompt, queue, output, fr_info, was_retry=True)
                else:
                    print("‚ùå Ph·∫£n h·ªìi ti·∫øp t·ª•c l·ªói sau khi ƒë√£ retry ‚Üí b·ªè qua")
                continue  # lu√¥n b·ªè qua k·∫øt qu·∫£ l·ªói
            
            if html_content!='':
                if output is not None:
                    html_content_=f"<div style='font-size:12px; font-family:Verdana'>{html_content}</div>"
                    output.set_html(html_content_)
                
            if fr_info is not None:
                lbl_level=fr_info['level']
                lbl_socre=fr_info['score']
                lbl_level.config(text=info.get('level', '-'))
                lbl_socre.config(text=info.get('score', '-'))       
                           
            if info:
                update_response_callback(info)
            
            for msg in log:
                write_log(msg)
            
    except Empty:
        pass
    window.after(100, update_response,window,queue)
            
##c·∫≠p nh·∫≠p log             
def wait_queue_log(queue,output):
    try:
        result = queue.get_nowait()
        output.insert(tk.END, result+"\n")  # Ch√®n n·ªôi dung v√†o cu·ªëi
    except Empty:
        output.after(100, wait_queue_log, queue, output)
        
def print_log(text,output):
    global queue_log
    queue_log.put(text)
    wait_queue_log(queue_log,output)
###
def btn_send_click(args):
    input=args['input']
    queue = args['queue']  # L·∫•y tham s·ªë queue t·ª´ args
    output = args['output']  # L·∫•y tham s·ªë label t·ª´ args
    prompt= input.get("1.0",tk.END).strip()
    if prompt:
        call_gemini_api_thread(prompt,queue,output)
        
def btn_clear_cache_click(args):
    input=args['input']
    output = args['output']         # L·∫•y tham s·ªë label t·ª´ args
    input.delete("1.0", tk.END) 
    output.delete("1.0", tk.END)    # X√≥a t·ª´ d√≤ng 1, c·ªôt 0 ƒë·∫øn cu·ªëi
    history.clear()
    delete_all_files_in_folder(PATH_CATCH)
    messagebox.showinfo('info','X√≥a Cache OK- C·∫ßn ph·∫£i n·∫°p l·∫°i b√†i t·∫≠p')
    
def btn_load_rule_click(args):
    queue = args['queue']  # L·∫•y tham s·ªë queue t·ª´ args
    output = args['output']  # L·∫•y tham s·ªë label t·ª´ args
    history.clear()
    prompt=main_rule
    if prompt:
        call_gemini_api_thread(prompt,queue,output)
    print('load rule ok')

def btn_help_click(args):
    queue = args['queue']  # L·∫•y tham s·ªë queue t·ª´ args
    output = args['output']  # L·∫•y tham s·ªë label t·ª´ args
    fr_info=args['fr_info']
    prompt=help_promt
    if prompt:
        call_gemini_api_thread(prompt,queue,output,fr_info)
    
    print('load help ok')

def window_on_closing(window):
    print('close window')
    global history
    global CACHE_STATUS
    if CACHE_STATUS==1:
        timestr = datetime.now().strftime("%y%m%d%H%M%S")
        path_catch=f'{PATH_CATCH}/cache_{timestr}.json'
        with open(path_catch, "w") as f:
            json.dump(history, f, indent=4)
    window.destroy()  # B·∫Øt bu·ªôc g·ªçi ƒë·ªÉ tho√°t

def btn_run_code_click(args):
    code_input = args['input']
    code = code_input.get("1.0", tk.END).strip()
    
    if not code: # Ki·ªÉm tra chu·ªói r·ªóng sau khi lo·∫°i b·ªè kho·∫£ng tr·∫Øng
        messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p m√£ ƒë·ªÉ ch·∫°y.")
        return
    
    #global CURRENT_EXERCISE_LANGUAGE # Truy c·∫≠p bi·∫øn ng√¥n ng·ªØ to√†n c·ª•c
    result = ""
    
    print(f"DEBUG: Attempting to run code for language: {CURRENT_EXERCISE_LANGUAGE}")

    if CURRENT_EXERCISE_LANGUAGE == "c":
        # Ki·ªÉm tra xem h√†m compile_code c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi g·ªçi
        if 'compile_code' in globals(): 
            result = compile_code(code)
        else:
            result = "Error: C compiler function (compile_code) not found. Please check compiler_c.py import."
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y tr√¨nh bi√™n d·ªãch C.")
    elif CURRENT_EXERCISE_LANGUAGE == "java":
        # Gi·∫£ ƒë·ªãnh b·∫°n c√≥ h√†m compile_java ƒë∆∞·ª£c import
        if 'compile_java' in globals(): 
            result = compile_java(code)
        else:
            result = "Error: Java compiler function (compile_java) not found. Please ensure it's imported."
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y tr√¨nh bi√™n d·ªãch Java.")
    elif CURRENT_EXERCISE_LANGUAGE == "python":
        # Gi·∫£ ƒë·ªãnh b·∫°n c√≥ h√†m run_python ƒë∆∞·ª£c import
        if 'run_python' in globals(): 
            result = run_python(code)
        else:
            result = "Error: Python runner function (run_python) not found. Please ensure it's imported."
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y tr√¨nh ch·∫°y Python.")
    else:
        result = f"Error: Ng√¥n ng·ªØ '{CURRENT_EXERCISE_LANGUAGE}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ho·∫∑c kh√¥ng x√°c ƒë·ªãnh."
        messagebox.showerror("L·ªói", result)
        
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ ra txt_output (gi·∫£ ƒë·ªãnh txt_output l√† bi·∫øn to√†n c·ª•c v√† l√† m·ªôt widget Text/HTMLLabel)
    if 'txt_output' in globals() and hasattr(txt_output, 'delete') and hasattr(txt_output, 'insert'):
        txt_output.delete("1.0", tk.END)
        txt_output.insert(tk.END, result)
    else:
        print(result) # Fallback ƒë·ªÉ in ra console n·∫øu kh√¥ng c√≥ output widget

def tree_load(tree,json_course):
    for i, session in enumerate(json_course["sessions"]):
        session_id = tree.insert("", "end", text=session["title"], open=True)
        for j, ex in enumerate(session["exercises"]):
            tree.insert(session_id, "end", text=ex["title"],values=(ex['status'],ex['score'],i, j))

def reload_tree(tree, json_course):
    # ‚ùå X√≥a h·∫øt c√°c node c≈©
    for item in tree.get_children():
        tree.delete(item)

    # ‚úÖ Load l·∫°i d·ªØ li·ªáu
    tree_load(tree, json_course)

def btn_refesh_click(args):
    global json_course
    global main_rule
    global API_KEY
    global MODEL
    
    try:
        path_course=download_file_course_from_driver()
        path_img_zip=download_file_img_from_driver()
        update_data_from_foler_download(path_course,path_img_zip)
    except:
        messagebox.showerror('Error','L·ªói c·∫≠p nh·∫≠p b√†i t·∫≠p t·ª´ google driver')
        
    
    with open(PATH_JSON_COURSE, "r", encoding="utf-8") as file:
        try:
            json_course = json.load(file)
            tree=args['tree']
            reload_tree(tree,json_course)
        except:
            json_course=None
            messagebox.showerror('Error','L·ªói load file course.json')
            return
    
    with open(PATH_JSON_RULE, "r", encoding="utf-8") as file:
        try:
            main_rule = file.read()
        except:
            main_rule=''
            messagebox.showerror('Error','L·ªói load file rule.md')
            return
        
    messagebox.showinfo('info','L√†m m·ªõi OK')

def btn_refesh_offline_click(args):
    global json_course
    try:
        path_course=get_path_join(PATH_UPLOAD,"course_update.json")
        shutil.copy(path_course, PATH_DOWNLOAD)
        path_course_download=get_path_join(PATH_DOWNLOAD,"course_update.json")
        
        path_img_upload=get_path_join(PATH_UPLOAD,"img")
        shutil.copytree(path_img_upload,PATH_IMG, dirs_exist_ok=True)
        
        update_data_from_foler_download(path_course_download,'')
    except Exception as err:
        messagebox.showerror('L·ªói c·∫≠p nh·∫≠p file',err)
    
    with open(PATH_JSON_COURSE, "r", encoding="utf-8") as file:
        try:
            json_course = json.load(file)
            tree=args['tree']
            reload_tree(tree,json_course)
            messagebox.showinfo("OK","c·∫≠p nh·∫≠p course ok")
        except:
            json_course=None
            messagebox.showerror('Error','L·ªói load file course.json')
            return
    

def update_code_editor_language(code_editor_widget, language):
    """C·∫≠p nh·∫≠t ng√¥n ng·ªØ highlight cho CodeEditor."""
    if hasattr(code_editor_widget, 'configure_language'):
        code_editor_widget.configure_language(language)
    else:
        print(f"C·∫£nh b√°o: CodeEditor kh√¥ng h·ªó tr·ª£ configure_language. Kh√¥ng th·ªÉ thay ƒë·ªïi highlight cho: {language}")

        
# def on_course_select(event, tree_widget, course_var_obj, input_widget=None):
#     global json_course
#     global CURRENT_COURSE_NAME
#     global CURRENT_COURSE_LANGUAGE
#     global CURRENT_EXERCISE_LANGUAGE # This one is used by the compiler
    
#     selected_course_name = course_var_obj.get()
#     print(f"M√¥n h·ªçc ƒë∆∞·ª£c ch·ªçn: {selected_course_name}")

#     for item in tree_widget.get_children():
#         tree_widget.delete(item)

#     if selected_course_name in COURSE_FILE_MAP:
#         file_path_to_load = COURSE_FILE_MAP[selected_course_name]
#         try:
#             with open(file_path_to_load, "r", encoding="utf-8") as file:
#                 json_course_new = json.load(file)
            
#             json_course = json_course_new # Update global json_course
            
#             # C·∫≠p nh·∫≠t th√¥ng tin m√¥n h·ªçc hi·ªán t·∫°i
#             CURRENT_COURSE_NAME = json_course.get("course_name", "M√¥n h·ªçc kh√¥ng x√°c ƒë·ªãnh")
#             CURRENT_COURSE_LANGUAGE = json_course.get("course_language", "c").lower()
#             CURRENT_EXERCISE_LANGUAGE = CURRENT_COURSE_LANGUAGE # ƒê·ªìng b·ªô cho compiler

#             print(f"DEBUG: Course language set to: {CURRENT_COURSE_LANGUAGE}")
#             print(f"DEBUG: Course name set to: {CURRENT_COURSE_NAME}")

#             if input_widget:
#                 update_code_editor_language(input_widget, CURRENT_EXERCISE_LANGUAGE)
            
#             tree_load(tree_widget, json_course)
#             print(f"DEBUG: Loaded course: {selected_course_name} from {file_path_to_load}")

#         except FileNotFoundError:
#             messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y file: {file_path_to_load}")
#             print(f"ERROR: File not found: {file_path_to_load}")
#             CURRENT_COURSE_NAME = "M√¥n h·ªçc kh√¥ng x√°c ƒë·ªãnh"
#             CURRENT_COURSE_LANGUAGE = "c"
#             CURRENT_EXERCISE_LANGUAGE = "c"
#         except Exception as e:
#             messagebox.showerror("L·ªói", f"L·ªói khi t·∫£i d·ªØ li·ªáu cho m√¥n {selected_course_name}: {e}")
#             print(f"ERROR: Failed to load course {selected_course_name}: {e}")
#             CURRENT_COURSE_NAME = "M√¥n h·ªçc kh√¥ng x√°c ƒë·ªãnh"
#             CURRENT_COURSE_LANGUAGE = "c"
#             CURRENT_EXERCISE_LANGUAGE = "c"
#     else:
#         messagebox.showwarning("C·∫£nh b√°o", f"Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu cho m√¥n: {selected_course_name}.")
#         CURRENT_COURSE_NAME = "M√¥n h·ªçc kh√¥ng x√°c ƒë·ªãnh"
#         CURRENT_COURSE_LANGUAGE = "c"
#         CURRENT_EXERCISE_LANGUAGE = "c"        

# S·ª≠a ƒë·ªãnh nghƒ©a h√†m on_course_select
def on_course_select(event, tree_widget, course_var_obj, input_widget=None, fr_lesson_tree_widget=None): # TH√äM fr_lesson_tree_widget
    global json_course
    global CURRENT_COURSE_NAME
    global CURRENT_COURSE_LANGUAGE
    global CURRENT_EXERCISE_LANGUAGE
    
    selected_course_name = course_var_obj.get()
    print(f"M√¥n h·ªçc ƒë∆∞·ª£c ch·ªçn: {selected_course_name}")

    # ƒê·∫£m b·∫£o hi·ªÉn th·ªã l·∫°i treeview n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô xem chi ti·∫øt b√†i t·∫≠p
    if fr_lesson_tree_widget:
        # L·∫•y t·∫•t c·∫£ c√°c widget con c·ªßa fr_lesson_tree_widget
        for widget in fr_lesson_tree_widget.winfo_children():
            # Ki·ªÉm tra n·∫øu widget con kh√¥ng ph·∫£i l√† tree_widget (c√¢y b√†i t·∫≠p)
            # th√¨ h·ªßy b·ªè n√≥ (v√¨ n√≥ l√† frame_content ch·ª©a chi ti·∫øt b√†i h·ªçc)
            if widget != tree_widget:
                widget.destroy()
        tree_widget.grid(row=0, column=0, sticky='nswe') # ƒê·∫£m b·∫£o tree_widget hi·ªÉn th·ªã

    for item in tree_widget.get_children():
        tree_widget.delete(item)

    if selected_course_name in COURSE_FILE_MAP:
        file_path_to_load = COURSE_FILE_MAP[selected_course_name]
        try:
            with open(file_path_to_load, "r", encoding="utf-8") as file:
                json_course_new = json.load(file)
            
            json_course = json_course_new # Update global json_course
            
            # C·∫≠p nh·∫≠t th√¥ng tin m√¥n h·ªçc hi·ªán t·∫°i
            CURRENT_COURSE_NAME = json_course.get("course_name", "M√¥n h·ªçc kh√¥ng x√°c ƒë·ªãnh")
            CURRENT_COURSE_LANGUAGE = json_course.get("course_language", "c").lower()
            CURRENT_EXERCISE_LANGUAGE = CURRENT_COURSE_LANGUAGE # ƒê·ªìng b·ªô cho compiler

            print(f"DEBUG: Course language set to: {CURRENT_COURSE_LANGUAGE}")
            print(f"DEBUG: Course name set to: {CURRENT_COURSE_NAME}")

            if input_widget:
                update_code_editor_language(input_widget, CURRENT_EXERCISE_LANGUAGE)
            
            tree_load(tree_widget, json_course)
            print(f"DEBUG: Loaded course: {selected_course_name} from {file_path_to_load}")

        except FileNotFoundError:
            messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y file: {file_path_to_load}")
            print(f"ERROR: File not found: {file_path_to_load}")
            CURRENT_COURSE_NAME = "M√¥n h·ªçc kh√¥ng x√°c ƒë·ªãnh"
            CURRENT_COURSE_LANGUAGE = "c"
            CURRENT_EXERCISE_LANGUAGE = "c"
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi t·∫£i d·ªØ li·ªáu cho m√¥n {selected_course_name}: {e}")
            print(f"ERROR: Failed to load course {selected_course_name}: {e}")
            CURRENT_COURSE_NAME = "M√¥n h·ªçc kh√¥ng x√°c ƒë·ªãnh"
            CURRENT_COURSE_LANGUAGE = "c"
            CURRENT_EXERCISE_LANGUAGE = "c"
    else:
        messagebox.showwarning("C·∫£nh b√°o", f"Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu cho m√¥n: {selected_course_name}.")
        CURRENT_COURSE_NAME = "M√¥n h·ªçc kh√¥ng x√°c ƒë·ªãnh"
        CURRENT_COURSE_LANGUAGE = "c"
        CURRENT_EXERCISE_LANGUAGE = "c"
        
def on_select(event,args):
    #{"tree":tree,"fr_tree":fr_lesson_tree,"queue":queue,"output":txt_output}
    global json_course
    global history 
    global main_rule
    global ID_EXERCISE   
    global CURRENT_COURSE_NAME # Th√™m v√†o ƒë·ªÉ c√≥ th·ªÉ c·∫≠p nh·∫≠t
    global CURRENT_COURSE_LANGUAGE # Th√™m v√†o ƒë·ªÉ c√≥ th·ªÉ c·∫≠p nh·∫≠t
    global CURRENT_EXERCISE_LANGUAGE # Th√™m v√†o ƒë·ªÉ c√≥ th·ªÉ c·∫≠p nh·∫≠t

    tree=args['tree']
    fr_lesson_tree=args['fr_tree']
    queue=args['queue']
    output=args['output']
    fr_info=args['fr_info']
    selected_item = tree.focus()
    data = tree.item(selected_item)
    values = data.get("values")
    
    ID_EXERCISE=None
    if values: # Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i l√† m·ªôt b√†i t·∫≠p (leaf node) kh√¥ng
        session_index=values[-2]
        exercise_index = values[-1]
        print(session_index,exercise_index)
        exercise = json_course["sessions"][session_index]["exercises"][exercise_index]
        ID_EXERCISE=exercise['id']
    
        # ----------- ƒê·∫∂T KH·ªêI L·ªÜNH C·ª¶A B·∫†N T·∫†I ƒê√ÇY -----------
        # N√≥ s·∫Ω ƒë∆∞·ª£c th·ª±c thi m·ªói khi m·ªôt b√†i t·∫≠p ƒë∆∞·ª£c ch·ªçn trong Treeview.
        CURRENT_COURSE_NAME = json_course.get("course_name", "M√¥n h·ªçc kh√¥ng x√°c ƒë·ªãnh")
        CURRENT_COURSE_LANGUAGE = json_course.get("course_language", "c").lower()
        CURRENT_EXERCISE_LANGUAGE = CURRENT_COURSE_LANGUAGE # ƒê·ªìng b·ªô cho compiler v√† CodeEditor
        print(f"DEBUG: Current Course Name (on_select): {CURRENT_COURSE_NAME}")
        print(f"DEBUG: Current Course Language (on_select): {CURRENT_COURSE_LANGUAGE}")
        print(f"DEBUG: Current Exercise Language (on_select): {CURRENT_EXERCISE_LANGUAGE}")
        # ----------------------------------------------------
        
        # C·∫≠p nh·∫≠t ng√¥n ng·ªØ cho CodeEditor (n·∫øu ƒë√£ t·∫°o)
        # Truy·ªÅn input_widget v√†o args c·ªßa on_select, v√≠ d·ª•: "input_widget": txt_input
        # input_widget = args.get('input_widget') 
        # if input_widget:
        #     update_code_editor_language(input_widget, CURRENT_EXERCISE_LANGUAGE)

        tree.grid_forget()

        frame_content=tk.Frame(fr_lesson_tree)
        frame_content.grid(row=0,column=0,sticky='nswe')
        frame_content.columnconfigure(0,weight=1)
        frame_content.rowconfigure(1,weight=1)
        frame_content.rowconfigure(2,weight=1)
        frame_content.rowconfigure(4,weight=1)
        
        tk.Label(frame_content, text=exercise["title"],font=("Arial", 12)).grid(row=0,column=0,sticky='nswe')
        txt=tk.Text(frame_content,font=("Arial", 12),height=10,width=40,wrap='word',bg='white',fg='black')
        txt.grid(row=1,column=0,sticky='nswe')
        txt.insert(tk.END, exercise["description"])
        
        fr_pic=tk.Frame(frame_content,bg='gray')
        fr_pic.grid(row=2,column=0,sticky='nswe')
        
        #fr_pic.columnconfigure(0,weight=1)
        fr_pic.rowconfigure(0,weight=0)
        
        def btn_img_click(args):

            new_window = tk.Toplevel(frame_content)
            new_window.title(args['img_tittle'])
            #new_window.geometry("500x400")  # K√≠ch th∆∞·ªõc c·ª≠a s·ªï m·ªõi
            new_window.transient(frame_content)  # G·∫Øn c·ª≠a s·ªï m·ªõi v√†o c·ª≠a s·ªï ch√≠nh
            new_window.grab_set()       # V√¥ hi·ªáu h√≥a t∆∞∆°ng t√°c v·ªõi c·ª≠a s·ªï ch√≠nh

            new_window.rowconfigure(0,weight=1)
            new_window.columnconfigure(0,weight=1)
            
            tk_label_image=label_image(new_window,args['img_path'],args['img_tittle'])
            tk_label_image.grid(row=0,column=0,sticky='nswe')
            
            def on_close():
                print('ƒë√≥ng c·ª≠a s·ªï')
                new_window.destroy()
            
            new_window.protocol("WM_DELETE_WINDOW", on_close)
            new_window.wait_window()

        
        btn_img=[]
        for i,img in enumerate(exercise["image"]):
            if(img['link']!=''):
                img_path_=  get_path_join(PATH_IMG,img['link'])
                img_title_= img['image_title']
                btn_img.append({'id':i,'img_tittle':img_title_,'img_path':img_path_ ,'btn':tk.Button(fr_pic,text=img_title_)})

        for btn in btn_img:
            id = btn['id']
            btn['btn'].grid(row=0,column=id,sticky='w',padx='2')
            btn['btn'].config(command=lambda: btn_img_click({'img_tittle':img_title_,'img_path':img_path_}))
            
            
        tk.Label(frame_content, text="H∆∞·ªõng d·∫´n:",font=("Arial", 12), fg="white",bg="green").grid(row=3,column=0,sticky='nswe')
        txt_guidance=tk.Text(frame_content,font=("Arial", 11),height=10,width=40,wrap='word')
        txt_guidance.grid(row=4,column=0,sticky='nswe')
                
        for g in exercise["guidance"]:
            txt_guidance.insert(tk.END, "‚Ä¢ " + g+"\n")
            
        def back_to_tree():
            frame_content.destroy()
            tree.grid(row=0, column=0, sticky='nswe')
            reload_tree(tree,json_course)
        
        def help_from_AI(args):
            history.clear()
            print('clear cache ok')
            print(f'sesion_index={session_index};exercise_index={exercise_index}')

            # G·ªçi h√†m create_main_rule v·ªõi ƒë·ªß c√°c ƒë·ªëi s·ªë
            prompt = create_main_rule(
                main_rule, # main_rule l√† n·ªôi dung th√¥ c·ªßa rule.md ƒë√£ c√≥ placeholders
                json_sessions_to_markdown(json_course, session_index, exercise_index),
                course_name=CURRENT_COURSE_NAME, # S·ª≠ d·ª•ng bi·∫øn global
                course_language=CURRENT_COURSE_LANGUAGE # S·ª≠ d·ª•ng bi·∫øn global
            )
            #print(prompt) # ƒê·ªÉ debug prompt cu·ªëi c√πng
            call_gemini_api_thread(prompt,queue,output,fr_info)
        
        fr_button=tk.Frame(frame_content,bg='green')
        fr_button.grid(row=5,column=0,sticky='nswe')
        fr_button.columnconfigure(0,weight=1)
        fr_button.columnconfigure(1,weight=1)
        
        #lbl_note=tk.Label(fr_button,text='Nh·∫•n n√∫t t·∫£i b√†i t·∫≠p l√™n AI ƒë·ªÉ b·∫Øt ƒë·∫ßu b√†i m·ªõi',font=("Arial", 11),fg='red')
        lbl_note=tk.Label(fr_button,text='',font=("Arial", 11),fg='red')
        lbl_note.grid(row=1,column=0,columnspan=2,sticky='nswe')
        
        tk.Button(fr_button, text="Quay l·∫°i",font=("Arial", 11), command=back_to_tree).grid(row=0, column=0, sticky='w', pady=10,padx=10)
        
        # L∆∞u tham chi·∫øu ƒë·∫øn n√∫t "T·∫£i b√†i t·∫≠p l√™n AI"
        #btn_load_exercise_to_ai = tk.Button(fr_button, text="T·∫£i b√†i t·∫≠p l√™n AI",font=("Arial", 11), command=lambda:help_from_AI({'label':lbl_note}))
        #btn_load_exercise_to_ai.grid(row=0, column=1, sticky='w', pady=10,padx=10)

        # *** TH√äM D√íNG N√ÄY ƒê·ªÇ T·ª∞ ƒê·ªòNG NH·∫§N N√öT ***
        # G·ªçi command c·ªßa n√∫t ngay sau khi n√≥ ƒë∆∞·ª£c t·∫°o v√† c·∫•u h√¨nh
        help_from_AI({'label':lbl_note}) # G·ªçi h√†m t∆∞∆°ng ·ª©ng v·ªõi n√∫t
        
def apply_treeview_style():
    style = ttk.Style()
    style.configure("Treeview", font=("Arial", 12))
    style.configure("Treeview.Heading", font=("Arial", 13, "bold"))  # N·∫øu d√πng heading

def btn_create_img_description_click(args):
    global DICT_USER_INFO
    
    model=args['model']
    fr_parent=args['frame']
    new_window = tk.Toplevel(fr_parent)
    new_window.title('create image description')
    #new_window.geometry("500x400")  # K√≠ch th∆∞·ªõc c·ª≠a s·ªï m·ªõi
    new_window.transient(fr_parent)  # G·∫Øn c·ª≠a s·ªï m·ªõi v√†o c·ª≠a s·ªï ch√≠nh
    new_window.grab_set()       # V√¥ hi·ªáu h√≥a t∆∞∆°ng t√°c v·ªõi c·ª≠a s·ªï ch√≠nh

    new_window.rowconfigure(0,weight=1)
    new_window.columnconfigure(0,weight=1)
    
    us_gemini_image_description(new_window,model)
    
    def on_close():
        print('ƒë√≥ng c·ª≠a s·ªï')
        new_window.destroy()
    
    new_window.protocol("WM_DELETE_WINDOW", on_close)
    new_window.wait_window()

def btn_submit_exercise_click(args):
    global DICT_USER_INFO
    name_=DICT_USER_INFO[0]['username']
    mssv_=DICT_USER_INFO[0]['mssv']
    path_log_file=get_path_join(PATH_LOG,'log.json')
    if os.path.exists(path_log_file):
        file_log_name =create_file_log_name(name_,mssv_)
        try:
            upload_file_to_driver(path_log_file,file_log_name)
            messagebox.showinfo("Info",f'{file_log_name}  upload th√†nh c√¥ng')
        except Exception as err:
            messagebox.showinfo("Info",f'{file_log_name}  upload kh√¥ng th√†nh c√¥ng: {err}')
    else:
        messagebox.showinfo("Info",'Kh√¥ng t√¨m th·∫•y file ƒë·ªÉ upload')

def btn_upload_course_click(args):
    fr_parent=args['frame']
    new_window = tk.Toplevel(fr_parent)
    new_window.title('Upload course')
    new_window.geometry("500x200")  # K√≠ch th∆∞·ªõc c·ª≠a s·ªï m·ªõi

    new_window.transient(fr_parent)  # G·∫Øn c·ª≠a s·ªï m·ªõi v√†o c·ª≠a s·ªï ch√≠nh
    new_window.grab_set()       # V√¥ hi·ªáu h√≥a t∆∞∆°ng t√°c v·ªõi c·ª≠a s·ªï ch√≠nh

    new_window.rowconfigure(0,weight=1)
    new_window.columnconfigure(0,weight=1)

    us_upload_file_to_google_driver(new_window)

    def on_close():
        print('ƒë√≥ng c·ª≠a s·ªï')
        new_window.destroy()
    
    new_window.protocol("WM_DELETE_WINDOW", on_close)
    new_window.wait_window()

import webbrowser # ƒê·∫£m b·∫£o d√≤ng n√†y ƒë√£ ƒë∆∞·ª£c th√™m ·ªü ƒë·∫ßu file

def open_gemini_api_window(parent_window):
    new_window = tk.Toplevel(parent_window)
    new_window.title("Qu·∫£n l√Ω Gemini API Keys")
    new_window.geometry("600x400") # K√≠ch th∆∞·ªõc m·∫∑c ƒë·ªãnh

    new_window.rowconfigure(3, weight=1) # ƒê·ªÉ txt_gemini_api_keys co gi√£n
    new_window.columnconfigure(0, weight=1)

    tk.Label(new_window, text="Qu·∫£n l√Ω Gemini API Keys", font=("Arial", 14, "bold"),
             fg="blue", pady=10).grid(row=0, column=0, columnspan=2, sticky='ew')

    btn_get_gemini_api = tk.Button(new_window, text="M·ªü trang Get Gemini API", font=("Arial", 11),
                                 command=lambda: btn_get_gemini_api_click())
    btn_get_gemini_api.grid(row=1, column=0, padx=10, pady=5, sticky='w')

    lbl_api_keys = tk.Label(new_window, text="C√°c Gemini API Key (m·ªói API key m·ªôt d√≤ng):", font=("Arial", 11))
    lbl_api_keys.grid(row=2, column=0, columnspan=2, padx=10, pady=5, sticky='w')

    txt_gemini_api_keys = scrolledtext.ScrolledText(new_window, wrap="word", font=("Arial", 10), height=10)
    txt_gemini_api_keys.grid(row=3, column=0, columnspan=2, padx=10, pady=5, sticky='nswe')

    # Load API keys hi·ªán c√≥ v√†o textbox khi kh·ªüi t·∫°o
    if API_KEY_LIST:
        for key in API_KEY_LIST:
            txt_gemini_api_keys.insert(tk.END, key + "\n")

    btn_save_gemini_api = tk.Button(new_window, text="L∆∞u API Keys", font=("Arial", 11),
                                  command=lambda: btn_save_gemini_api_click(txt_gemini_api_keys, new_window)) # Truy·ªÅn new_window ƒë·ªÉ c√≥ th·ªÉ ƒë√≥ng n·∫øu mu·ªën
    btn_save_gemini_api.grid(row=4, column=0, padx=10, pady=10, sticky='w')

    # Thi·∫øt l·∫≠p window l√† transient c·ªßa c·ª≠a s·ªï cha
    new_window.transient(parent_window)
    # NgƒÉn ng∆∞·ªùi d√πng t∆∞∆°ng t√°c v·ªõi c·ª≠a s·ªï cha khi c·ª≠a s·ªï n√†y m·ªü (modal)
    new_window.grab_set()
    # Ch·ªù cho ƒë·∫øn khi c·ª≠a s·ªï n√†y b·ªã h·ªßy
    parent_window.wait_window(new_window)

# H√†m n√†y gi·ªØ nguy√™n nh∆∞ ƒë√£ t·∫°o ·ªü c√¢u tr·∫£ l·ªùi tr∆∞·ªõc
def btn_get_gemini_api_click():
    url = "https://ai.google.dev/gemini-api/docs"
    webbrowser.open_new_tab(url)

# H√†m n√†y c·∫ßn m·ªôt thay ƒë·ªïi nh·ªè ƒë·ªÉ nh·∫≠n parent_window n·∫øu b·∫°n mu·ªën ƒë√≥ng c·ª≠a s·ªï sau khi l∆∞u
def btn_save_gemini_api_click(txt_widget, parent_window=None):
    global API_KEY_LIST
    
    api_keys_text = txt_widget.get("1.0", tk.END).strip()
    new_api_keys = [line.strip() for line in api_keys_text.split('\n') if line.strip()]

    if not new_api_keys:
        messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt API Key.")
        return

    try:
        current_config = {}
        if os.path.exists(PATH_JSON_CONFIG):
            with open(PATH_JSON_CONFIG, "r", encoding="utf-8") as f:
                current_config = json.load(f)
        
        if 'api' not in current_config:
            current_config['api'] = [{}, {}]
        if not isinstance(current_config['api'], list) or len(current_config['api']) < 1:
            current_config['api'] = [{}]
        
        current_config['api'][0]['gemini_key'] = new_api_keys
        
        save_json_file(PATH_JSON_CONFIG, current_config)
        
        API_KEY_LIST = new_api_keys
        
        global API_KEY
        API_KEY = API_KEY_LIST[0] if API_KEY_LIST else ''
        
        update_model()

        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ l∆∞u API Keys th√†nh c√¥ng!")
        print("API Keys ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† l∆∞u v√†o config.json")
        
        # ƒê√≥ng c·ª≠a s·ªï sau khi l∆∞u th√†nh c√¥ng
        if parent_window:
            parent_window.destroy()

    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u API Keys: {e}")
        print(f"L·ªói khi l∆∞u API Keys: {e}")

def main():
    global STUDENT_LIST, API_KEY_LIST, API_KEY, MODEL, DICT_USER_INFO, json_course, main_rule, model, history, queue, queue_log, APP_VERSION, ACCOUNT_ROLE, ID_EXERCISE
    
    load_app_data()
    print(DICT_USER_INFO)
    
    ##################################GUI###############################################################
    window = tk.Tk()
    window.title('app')
    window.minsize(1200, 700) 
    
    #y√™u c·∫ßu ƒëƒÉng nh·∫≠p (b·ªè comment n·∫øu mu·ªën s·ª≠ d·ª•ng login)
    # login = us_login(window, {'dict_user': DICT_USER_INFO, 'student_list': STUDENT_LIST})
    
    # if login.result == 'ok':
    if (1): # T·∫°m th·ªùi b·ªè qua login ƒë·ªÉ test GUI
        window.state('zoomed') # Ph√≥ng to c·ª≠a s·ªï, gi·ªØ thanh ti√™u ƒë·ªÅ
        
        if DICT_USER_INFO and isinstance(DICT_USER_INFO, list) and len(DICT_USER_INFO) > 0:
            mssv = DICT_USER_INFO[0].get('mssv', '0')
            if mssv == '0' or mssv == '1':
                ACCOUNT_ROLE = 'ADMIN'
        else:
            print("DICT_USER_INFO kh√¥ng h·ª£p l·ªá ho·∫∑c r·ªóng.")
            ACCOUNT_ROLE = 'GUEST'

        update_model()

        window.grid_rowconfigure(1, weight=1) 
        window.grid_columnconfigure(0, weight=1) 
        
        fr_header = tk.Frame(window)
        fr_header.grid(row=0, column=0, columnspan=3, sticky='nswe', pady=5)

        fr_footer = tk.Frame(window)
        fr_footer.grid(row=2, column=0, columnspan=3, sticky='nswe')
        
        fr_header.columnconfigure(0, weight=1) 
        
        paned_window = ttk.PanedWindow(window, orient=tk.HORIZONTAL)
        paned_window.grid(row=1, column=0, columnspan=3, sticky='nswe', padx=5, pady=5) 

        fr_left = tk.Frame(paned_window, bg='lightgray') 
        paned_window.add(fr_left, weight=1) 

        fr_center = tk.Frame(paned_window, bg='darkgray') 
        paned_window.add(fr_center, weight=2) 

        fr_right = tk.Frame(paned_window, bg='gray') 
        paned_window.add(fr_right, weight=1) 

        def set_initial_sashes_after_zoom():
            window.update_idletasks() 
            current_paned_width = paned_window.winfo_width()
            
            min_width_left = 400
            min_width_center = 500
            min_width_right = 300 
            
            total_desired_width = min_width_left + min_width_center + min_width_right
            
            if current_paned_width >= total_desired_width: 
                sash_pos_0 = min_width_left
                sash_pos_1 = min_width_left + min_width_center
            else:
                sash_pos_0 = int(current_paned_width * (min_width_left / total_desired_width))
                sash_pos_1 = int(current_paned_width * ((min_width_left + min_width_center) / total_desired_width))
            
            paned_window.sashpos(0, sash_pos_0)
            paned_window.sashpos(1, sash_pos_1)
            print(f"DEBUG: PanedWidth: {current_paned_width}, Sash0: {paned_window.sashpos(0)}, Sash1: {paned_window.sashpos(1)}")

        window.after(200, set_initial_sashes_after_zoom) 
                
        # T·∫°o menu bar ----------------------------------------------------------
        menubar = tk.Menu(window)
        window.config(menu=menubar) # G√°n menubar v√†o c·ª≠a s·ªï ch√≠nh
        
        # T·∫°o menu "File"
        file_menu = tk.Menu(menubar, tearoff=0) # tearoff=0 ƒë·ªÉ lo·∫°i b·ªè ƒë∆∞·ªùng g·∫°ch ƒë·ª©t
        menubar.add_cascade(label="File", menu=file_menu)

        # T·∫°o menu "Edit"
        edit_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Edit", menu=edit_menu)

        # T·∫°o menu "Tool"
        tool_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Function", menu=tool_menu)
        
        # TH√äM M·ª§C MENU M·ªöI CHO GEMINI API
        menubar.add_command(label="Gemini API", command=lambda: open_gemini_api_window(window))
        
        # Th√™m c√°c l·ªánh v√†o menu "File"
        #!file_menu.add_command(label="Open", command=your_open_function) # Thay b·∫±ng h√†m c·ªßa b·∫°n
        #!file_menu.add_command(label="Save", command=your_save_function)
        file_menu.add_separator() # Th√™m ƒë∆∞·ªùng ph√¢n c√°ch
        file_menu.add_command(label="Exit", command=lambda: window_on_closing(window))

        # Th√™m c√°c l·ªánh v√†o menu "Tool"
        tool_menu.add_command(label="L√†m m·ªõi", command=lambda: btn_refesh_click({"tree": tree}))
        tool_menu.add_command(label="T·∫°o gi·ªõi thi·ªáu ·∫£nh", command=lambda: btn_create_img_description_click({'model': model, 'frame': fr_center}))
        tool_menu.add_command(label="C·∫≠p nh·∫≠t b√†i t·∫≠p", command=lambda: btn_upload_course_click({'frame': fr_center}))
        tool_menu.add_command(label="N·ªôp b√†i", command=lambda: btn_submit_exercise_click({'frame': fr_center}))
        tool_menu.add_command(label="L√†m m·ªõi tr·ª±c ti·∫øp", command=lambda: btn_refesh_offline_click({"tree": tree}))
        tool_menu.add_command(label="X√≥a Cache", command=lambda: btn_clear_cache_click({'input': txt_input, 'output': txt_output}))
        tool_menu.add_command(label="Load Rule", command=lambda: btn_load_rule_click({'queue': queue, 'output': txt_output}))

        # Menu "Edit" c√≥ th·ªÉ ƒë·ªÉ tr·ªëng ho·∫∑c th√™m c√°c ch·ª©c nƒÉng ch·ªânh s·ª≠a n·∫øu c√≥
        edit_menu.add_command(label="Cut")
        edit_menu.add_command(label="Copy")
        edit_menu.add_command(label="Paste")
                
        fr_title = tk.Frame(fr_header, bg='green')
        fr_title.grid(row=0, column=0, sticky='nswe')
        fr_title.columnconfigure(0, weight=1) 
        
        # tk.Label(fr_title, text='K·ªπ thu·∫≠t l·∫≠p tr√¨nh', font=("Arial", 14), 
        #             fg="white", bg="green").grid(row=0, column=0, sticky='nswe')
        
        fr_control = tk.Frame(fr_header, bg='gray')
        # fr_control.grid(row=1, column=0, sticky='nswe')
        
        btn_exit = tk.Button(fr_control, text='Tho√°t', font=("Arial", 11), command=lambda: window_on_closing(window))
        # btn_exit.grid(row=0, column=5, padx=5) 
        
        btn_refesh = tk.Button(fr_control, text='L√†m m·ªõi')
        # btn_refesh.grid(row=0, column=0, padx=5)
                
        btn_create_img_description = tk.Button(fr_control, text='T·∫°o gi·ªõi thi·ªáu ·∫£nh')
        # if ACCOUNT_ROLE == 'ADMIN':
        #     btn_create_img_description.grid(row=0, column=1, padx=5)

        btn_upload_course = tk.Button(fr_control, text='C·∫≠p nh·∫≠p b√†i t·∫≠p')
        # if ACCOUNT_ROLE == 'ADMIN':
        #     btn_upload_course.grid(row=0, column=2, padx=5)
        
        btn_submit_exercise = tk.Button(fr_control, text="N·ªôp b√†i")
        # btn_submit_exercise.grid(row=0, column=3, padx=5)
        
        btn_refesh_offline = tk.Button(fr_control, text='l√†m m·ªõi tr·ª±c ti·∫øp')
        # if ACCOUNT_ROLE == 'ADMIN':
        #     btn_refesh_offline.grid(row=0, column=4, padx=5)

        btn_clear_cache = tk.Button(fr_control, text='X√≥a Cache')
        # btn_clear_cache.grid(row=0, column=6, padx=5) 

        btn_load_rule = tk.Button(fr_control, text='load rule')
        # btn_load_rule.grid(row=0, column=7, padx=5) 

        #fr_footer.columnconfigure(0, weight=1)
        
        #fr_footer_tittle = tk.Frame(fr_footer)
        #fr_footer_tittle.grid(row=0, column=0, sticky='nswe')
        
        #fr_footer_tittle.columnconfigure(0, weight=1)
        # tk.Label(fr_footer_tittle, text="Khoa ƒëi·ªán-ƒëi·ªán t·ª≠", font=("Arial", 14), 
        #             fg="white", bg="green").grid(row=0, column=0, sticky='nswe')
        
        #tk.Label(fr_footer, text=f'Version:{APP_VERSION}', font=("Arial", 14), fg="white", bg="green").grid(row=0, column=2, sticky='e')

        # ------------------- B·∫ÆT ƒê·∫¶U KH·ªêI T·∫†O FR_NAV V√Ä C√ÅC WIDGET CON ---------------------
        fr_left.rowconfigure(0, weight=1)
        fr_left.columnconfigure(0, weight=1)

        fr_nav = tk.Frame(fr_left, bg='gray')
        fr_nav.grid(row=0, column=0, sticky='nswe')

        fr_nav.rowconfigure(0, weight=0) # Label
        fr_nav.rowconfigure(1, weight=0) # Combobox
        fr_nav.rowconfigure(2, weight=1) # Treeview (ph·∫ßn n√†y s·∫Ω co gi√£n)
        fr_nav.columnconfigure(0, weight=1)

        tk.Label(fr_nav, text="Danh s√°ch b√†i t·∫≠p", font=("Arial", 12),
                fg="white", bg="green").grid(row=0, column=0, sticky='nswe')

        course_var = tk.StringVar()
        course_combobox = ttk.Combobox(fr_nav, textvariable=course_var, font=("Arial", 11), state="readonly")
        course_combobox.grid(row=1, column=0, sticky='ew', padx=5, pady=2) 

        # L·∫•y danh s√°ch c√°c t√™n m√¥n h·ªçc t·ª´ b·∫£n ƒë·ªì
        available_course_names = list(COURSE_FILE_MAP.keys()) # L·∫•y c√°c kh√≥a (t√™n m√¥n h·ªçc)
        course_combobox['values'] = available_course_names # G√°n cho combobox

        fr_lesson_tree = tk.Frame(fr_nav, bg='yellow')
        fr_lesson_tree.grid(row=2, column=0, sticky='nswe') 

        fr_lesson_tree.rowconfigure(0, weight=1)
        fr_lesson_tree.columnconfigure(0, weight=1)

        tree = ttk.Treeview(fr_lesson_tree, columns=("status", "score"), show="tree headings") 
        tree.heading("#0", text="Bu·ªïi v√† t√™n b√†i", anchor='w') 
        tree.heading("status", text="Tr·∫°ng th√°i", anchor='w')
        tree.heading("score", text="ƒêi·ªÉm", anchor='w')
        tree.column("status", width=75, stretch=False)
        tree.column("score", width=75, stretch=False)
        tree.grid(row=0, column=0, sticky='nswe')

        if available_course_names:
            default_selection = "K·ªπ thu·∫≠t l·∫≠p tr√¨nh (C)" 
            if default_selection in available_course_names:
                course_combobox.set(default_selection)
            else:
                course_combobox.set(available_course_names[0]) 

            # course_combobox.bind("<<ComboboxSelected>>", 
            #                      lambda event: on_course_select(event, tree, course_var, input_widget=txt_input)) # ƒê√£ s·ª≠a
            course_combobox.bind("<<ComboboxSelected>>", 
                                 lambda event: on_course_select(event, tree, course_var, input_widget=txt_input, fr_lesson_tree_widget=fr_lesson_tree)) # TH√äM fr_lesson_tree_widget=fr_lesson_tree
            
            if json_course is not None:
                tree_load(tree, json_course) 
            else:
                messagebox.showerror("Error", "L·ªói t·∫£i d·ªØ li·ªáu kh√≥a h·ªçc ban ƒë·∫ßu.")
                for item in tree.get_children():
                    tree.delete(item)
        else:
            messagebox.showerror("Error", "Kh√¥ng t√¨m th·∫•y file kh√≥a h·ªçc h·ª£p l·ªá n√†o trong th∆∞ m·ª•c data/.")
            for item in tree.get_children():
                tree.delete(item) 
                
        # ------------------- K·∫æT TH√öC KH·ªêI T·∫†O FR_NAV V√Ä C√ÅC WIDGET CON ---------------------
        
        #fr_input (b√™n trong fr_center)
        fr_center.rowconfigure(0, weight=3)
        fr_center.columnconfigure(0, weight=1)
        
        fr_input = tk.Frame(fr_center, bg='green')
        fr_input.grid(row=0, column=0, sticky="nswe")
        fr_input.grid_propagate(False) 
        
        fr_input.rowconfigure(1, weight=1)
        fr_input.columnconfigure(0, weight=1)

        tk.Label(fr_input, text='B√†i l√†m', font=("Arial", 12), 
                    fg="white", bg="green").grid(row=0, column=0)
        
        txt_input = CodeEditor(
                fr_input,
                language=CURRENT_EXERCISE_LANGUAGE, # <-- S·∫Ω lu√¥n c√≥ gi√° tr·ªã t·ª´ load_app_data()
                font=("Consolas", 14),
                highlighter="monokai",
                blockcursor=False,
                cursor="xterm",
                wrap="word")
        txt_input.grid(row=1, column=0, sticky='nswe', padx=5, pady=5)
        txt_input.configure(
            background="white",
            foreground="black",
            insertbackground="black"
        )
        
        # C·∫≠p nh·∫≠t ng√¥n ng·ªØ cho CodeEditor sau khi n√≥ ƒë∆∞·ª£c t·∫°o v√† sau khi language ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p.
        # ƒêi·ªÅu n√†y l√† c·∫ßn thi·∫øt n·∫øu language c·ªßa CodeEditor kh√¥ng t·ª± c·∫≠p nh·∫≠t sau khi kh·ªüi t·∫°o.
        # D√πng window.after() ƒë·ªÉ ƒë·∫£m b·∫£o m·ªçi th·ª© ƒë√£ ·ªïn ƒë·ªãnh.
        # if txt_input and CURRENT_EXERCISE_LANGUAGE:
        #     window.after(50, lambda: update_code_editor_language(txt_input, CURRENT_EXERCISE_LANGUAGE))
            
        fr_input_btn = tk.Frame(fr_input, bg='green')
        fr_input_btn.grid(row=2, column=0, sticky='nswe')
        
        fr_input_btn.columnconfigure(0, weight=1)
        fr_input_btn.columnconfigure(1, weight=1)
        fr_input_btn.columnconfigure(2, weight=1)
        
        btn_run_code = tk.Button(fr_input_btn, text='run code', font=("Arial", 11))
        btn_run_code.grid(row=0, column=0, sticky='n')
    
        btn_send = tk.Button(fr_input_btn, text='G·ª≠i ƒë·∫øn AI', font=("Arial", 11))
        btn_send.grid(row=0, column=1, sticky='n')
        
        btn_help = tk.Button(fr_input_btn, text='AI Gi√∫p ƒë·ª°', font=("Arial", 11))
        btn_help.grid(row=0, column=2, sticky='n')
        
        fr_right.rowconfigure(0, weight=1)
        fr_right.columnconfigure(0, weight=1)
        
        fr_response = tk.Frame(fr_right, bg='green')
        fr_response.grid(row=0, column=0, sticky="nswe")
        
        fr_response.rowconfigure(0, weight=0)
        fr_response.rowconfigure(1, weight=1)
        fr_response.columnconfigure(0, weight=1)
        
        tk.Label(fr_response, text='AI ph·∫£n h·ªìi', font=("Arial", 12), 
                    fg="white", bg="green").grid(row=0, column=0, sticky='n')
        
        txt_output = HTMLLabel(fr_response)
        txt_output.grid(row=1, column=0, sticky='nswe')
        
        tk.Label(fr_response, text='ƒê√°nh gi√°', font=("Arial", 12), 
                    fg="white", bg="green").grid(row=2, column=0, sticky='n')
        
        fr_info = tk.Frame(fr_response)
        fr_info.grid(row=3, column=0, sticky='nswe')
        fr_info.columnconfigure(0, weight=1)
        fr_info.columnconfigure(1, weight=1)
        fr_info.columnconfigure(2, weight=1)
        fr_info.columnconfigure(3, weight=1)
        
        tk.Label(fr_info, text='Level:', font=("Arial", 12)).grid(row=0, column=0, sticky='w')
        lbl_level = tk.Label(fr_info, text='-', font=("Arial", 12))
        lbl_level.grid(row=0, column=1, sticky='w')
        tk.Label(fr_info, text='Score', font=("Arial", 12)).grid(row=0, column=2, sticky='w')
        lbl_socre = tk.Label(fr_info, text='-', font=("Arial", 12))
        lbl_socre.grid(row=0, column=3, sticky='w')   
        
        # ------------------- K·∫øt th√∫c ph·∫ßn t·∫°o c√°c frame v√† widget con ---------------------

        ############################# Logic : event ####################
        btn_send.config(command=lambda: btn_send_click({'input': txt_input, 'queue': queue, 'output': txt_output}))
        btn_help.config(command=lambda: btn_help_click({'queue': queue, 'output': txt_output, 'fr_info': {'level': lbl_level, 'score': lbl_socre}}))
        btn_run_code.config(command=lambda: btn_run_code_click({'input': txt_input}))
        btn_clear_cache.config(command=lambda: btn_clear_cache_click({'input': txt_input, 'output': txt_output}))
        btn_load_rule.config(command=lambda: btn_load_rule_click({'queue': queue, 'output': txt_output}))
        btn_refesh.config(command=lambda: btn_refesh_click({"tree": tree}))
        btn_create_img_description.config(command=lambda: btn_create_img_description_click({'model': model, 'frame': fr_center}))
        btn_submit_exercise.config(command=lambda: btn_submit_exercise_click({'frame': fr_center}))
        btn_upload_course.config(command=lambda: btn_upload_course_click({'frame': fr_center}))
        btn_refesh_offline.config(command=lambda: btn_refesh_offline_click({"tree": tree}))
        
        tree.bind("<<TreeviewSelect>>", lambda event: on_select(event, {"tree": tree, "fr_tree": fr_lesson_tree, "queue": queue, "output": txt_output, "fr_info": {'level': lbl_level, 'score': lbl_socre}}))
        
        #s·ª± ki·ªán
        window.protocol("WM_DELETE_WINDOW", lambda: window_on_closing(window))
        
        if(CACHE_STATUS == 1):
            continue_conversation(txt_output, {'level': lbl_level, 'score': lbl_socre})
            
        update_response(window, queue)
        
        window.mainloop()
        
    else:
        print("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i / ƒê√≥ng c·ª≠a s·ªï login")
        window.destroy()
    
if __name__ == '__main__':
    main()